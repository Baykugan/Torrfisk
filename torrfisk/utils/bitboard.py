import numpy as np


def make_bitboards() -> np.ndarray:
    """Create a bitboard for each piece type."""

    wp = np.uint64(0b0000000000000000000000000000000000000000000000001111111100000000)
    wn = np.uint64(0b0000000000000000000000000000000000000000000000000000000001000010)
    wb = np.uint64(0b0000000000000000000000000000000000000000000000000000000000100100)
    wr = np.uint64(0b0000000000000000000000000000000000000000000000000000000010000001)
    wq = np.uint64(0b0000000000000000000000000000000000000000000000000000000000010000)
    wk = np.uint64(0b0000000000000000000000000000000000000000000000000000000000001000)

    bp = np.uint64(0b0000000011111111000000000000000000000000000000000000000000000000)
    bn = np.uint64(0b0100001000000000000000000000000000000000000000000000000000000000)
    bb = np.uint64(0b0010010000000000000000000000000000000000000000000000000000000000)
    br = np.uint64(0b1000000100000000000000000000000000000000000000000000000000000000)
    bq = np.uint64(0b0001000000000000000000000000000000000000000000000000000000000000)
    bk = np.uint64(0b0000100000000000000000000000000000000000000000000000000000000000)

    bitboards = np.array(
        [wp, wn, wb, wr, wq, wk, bp, bn, bb, br, bq, bk], dtype=np.uint64
    )

    return bitboards


def print_pieces(
    bitboards: np.ndarray,
    /,
) -> None:
    """Print the bitboards."""

    bitboards = np.append(bitboards, np.iinfo(np.uint64).max)

    piece_labels = np.array(
        ["♟", "♞", "♝", "♜", "♛", "♚", "♙", "♘", "♗", "♖", "♕", "♔", "  "],
        dtype=np.dtype("U4"),
    )

    pieces = np.left_shift(np.uint64(1), np.arange(64, dtype=np.uint64))
    pieces = np.flip(pieces)
    pieces = np.argmax((bitboards[np.newaxis, :] & pieces[:, np.newaxis] != 0), axis=1)
    pieces = piece_labels[pieces]
    pieces = pieces.reshape((8, 8))
    for idx, val in np.ndenumerate(pieces):
        print(f"\033[{2*idx[0]+2};{5*idx[1]+3}H", val, end="", sep="")
    print("", end="", flush=True)


def print_board() -> None:
    """Print the board."""
    print(
        "\033[H\033[J"
        "╔════╤════╤════╤════╤════╤════╤════╤════╗\n"
        "║    │    │    │    │    │    │    │    ║\n"
        "╟────┼────┼────┼────┼────┼────┼────┼────╢\n"
        "║    │    │    │    │    │    │    │    ║\n"
        "╟────┼────┼────┼────┼────┼────┼────┼────╢\n"
        "║    │    │    │    │    │    │    │    ║\n"
        "╟────┼────┼────┼────┼────┼────┼────┼────╢\n"
        "║    │    │    │    │    │    │    │    ║\n"
        "╟────┼────┼────┼────┼────┼────┼────┼────╢\n"
        "║    │    │    │    │    │    │    │    ║\n"
        "╟────┼────┼────┼────┼────┼────┼────┼────╢\n"
        "║    │    │    │    │    │    │    │    ║\n"
        "╟────┼────┼────┼────┼────┼────┼────┼────╢\n"
        "║    │    │    │    │    │    │    │    ║\n"
        "╟────┼────┼────┼────┼────┼────┼────┼────╢\n"
        "║    │    │    │    │    │    │    │    ║\n"
        "╚════╧════╧════╧════╧════╧════╧════╧════╝\n",
        end="",
        flush=True,
    )
